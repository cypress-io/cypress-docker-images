// creates new folder base/<version tag> with Dockerfile and README file
const path = require("path")
const fs = require("fs")
const shelljs = require("shelljs")
const { isStrictSemver } = require("../utils")

const versionTag = process.argv[2]

const baseNodeImage = "buster-slim"

if (!versionTag || !isStrictSemver(versionTag)) {
  console.error('expected version tag argument like "13.6.0"')
  process.exit(1)
}

let outputFolder = path.join("base", versionTag)

//if same <versionTag> folder already exists, replace it
if (shelljs.test("-d", outputFolder)) {
  console.log('found existing folder "%s"', outputFolder)
  outputFolder = `${outputFolder}-slim`
  console.log('creating new folder "%s"', outputFolder)
  shelljs.mkdir(outputFolder)
} else {
  console.log('creating "%s"', outputFolder)
  shelljs.mkdir(outputFolder)
}

const folderName = outputFolder.split("/")[1]

const Dockerfile = `
# WARNING: this file was autogenerated by ${path.basename(__filename)}
# contains all dependencies for running Cypress.io Test Runner
# https://on.cypress.io/docker and https://on.cypress.io/ci
#
# build it with command
#   docker build -t cypress/base:${folderName} .
#
FROM node:${versionTag}-${baseNodeImage}

RUN apt-get update && \\
  apt-get install --no-install-recommends -y \\
  libgtk2.0-0 \\
  libgtk-3-0 \\
  libnotify-dev \\
  libgconf-2-4 \\
  libgbm-dev \\
  libnss3 \\
  libxss1 \\
  libasound2 \\
  libxtst6 \\
  xauth \\
  xvfb \\
  # install text editors
  vim-tiny \\
  nano \\
  # install emoji font
  fonts-noto-color-emoji \\
  # install Chinese fonts
  # this list was copied from https://github.com/jim3ma/docker-leanote
  fonts-arphic-bkai00mp \\
  fonts-arphic-bsmi00lp \\
  fonts-arphic-gbsn00lp \\
  fonts-arphic-gkai00mp \\
  fonts-arphic-ukai \\
  fonts-arphic-uming \\
  ttf-wqy-zenhei \\
  ttf-wqy-microhei \\
  xfonts-wqy \\
  # clean up
  && rm -rf /var/lib/apt/lists/* \\
  && apt-get clean

# a few environment variables to make NPM installs easier
# good colors for most applications
ENV TERM=xterm \\
# avoid million NPM install messages
  npm_config_loglevel=warn \\
# allow installing when the main user is root
  npm_config_unsafe_perm=true

RUN npm --version \\
  && npm install -g yarn@latest --force \\
  && yarn --version \\
  && node -p process.versions \\
  && node -p 'module.paths' \\
  && echo  " node version:    $(node -v) \\n" \\
    "npm version:     $(npm -v) \\n" \\
    "yarn version:    $(yarn -v) \\n" \\
    "debian version:  $(cat /etc/debian_version) \\n" \\
    "user:            $(whoami) \\n"
`

const dockerFilename = path.join(outputFolder, "Dockerfile")
fs.writeFileSync(dockerFilename, Dockerfile.trim() + "\n", "utf8")

console.log("Saved %s", dockerFilename)

const README = `
<!-- WARNING: this file was autogenerated by ${path.basename(__filename)} -->
# cypress/base:${folderName}

A Docker image with all dependencies pre-installed.
Just add your NPM packages (including Cypress) and run the tests.
See [Cypress Docker docs](https://on.cypress.io/docker) and
[Cypress CI guide](https://on.cypress.io/ci).

## Example

Sample Dockerfile

\`\`\`
FROM cypress/base:${folderName}
RUN npm install --save-dev cypress
RUN $(npm bin)/cypress verify
RUN $(npm bin)/cypress run
\`\`\`
`

const readmeFilename = path.join(outputFolder, "README.md")
fs.writeFileSync(readmeFilename, README.trim() + "\n", "utf8")

console.log("Saved %s", readmeFilename)

// to make building images simpler and to follow the same pattern as previous builds
const buildScript = `
# WARNING: this file was autogenerated by ${path.basename(__filename)}
set e+x

# build image with Cypress dependencies
LOCAL_NAME=cypress/base:${folderName}

echo "Building $LOCAL_NAME"
docker build -t $LOCAL_NAME .
`

const buildFilename = path.join(outputFolder, "build.sh")
fs.writeFileSync(buildFilename, buildScript.trim() + "\n", "utf8")
shelljs.chmod("a+x", buildFilename)

console.log("Saved %s", buildFilename)

console.log(`
Please add the newly generated folder ${outputFolder} to Git. Build the Docker container locally to make sure it is correct`)

// Generate Base Config
require("child_process").fork(__dirname + "/generate-config.js", ["base", versionTag])

// GENERATE BASE README WITH UPDATED CHANGELOG
require("child_process").fork(__dirname + "/generate-base-readme.js", [versionTag])

// ASK USER IF THEY WANT TO COMMIT CHANGES
require("child_process").fork(__dirname + "/generate-commit.js", ["base", versionTag])
