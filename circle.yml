# WARNING: this file is automatically generated by generate-config.js
# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

orbs:
  node: circleci/node@1.1

commands:
  halt-on-branch:
    description: Halt current CircleCI job if not on master branch
    steps:
      - run:
          name: Halting job if not on master branch
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              echo "Not master branch, will skip the rest of commands"
              circleci-agent step halt
            else
              echo "On master branch, can continue"
            fi

  halt-if-docker-image-exists:
    description: Halt current CircleCI job if Docker image exists already
    parameters:
      imageName:
        type: string
        description: Docker image name to test
    steps:
      - run:
          name: Check if image << parameters.imageName >> exists or Docker hub does not respond
          # using https://github.com/cypress-io/docker-image-not-found
          # to check if Docker hub definitely does not have this image
          command: |
            if npx docker-image-not-found --repo << parameters.imageName >>; then
              echo Docker hub says image << parameters.imageName >> does not exist
            else
              echo Docker hub has image << parameters.imageName >> or not responding
              echo We should stop in this case
              circleci-agent step halt
            fi

  test-base-image:
    description: Build a test image from base image and test it
    parameters:
      nodeVersion:
        type: string
        description: Node version to expect in the base image, starts with "v"
      imageName:
        type: string
        description: Cypress base docker image to test
      checkNodeVersion:
        type: boolean
        description: Check if the FROM image name is strict Node version
        default: true
    steps:
      - when:
          condition: << parameters.checkNodeVersion >>
          steps:
          - run:
              name: confirm image has Node << parameters.nodeVersion >>
              # do not run Docker in the interactive mode - adds control characters!
              command: |
                version=$(docker run << parameters.imageName >> node --version)
                if [ "$version" == "<< parameters.nodeVersion >>" ]; then
                  echo "Base image has the expected version of Node << parameters.nodeVersion >>";
                else
                  echo "Problem: base image has unexpected Node version"
                  echo "Expected << parameters.nodeVersion >> and got $version"
                  exit 1
                fi
      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            WORKDIR /app
            RUN npm init --yes
            RUN npm install --save-dev cypress cypress-expect
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            # run Cypress by itself
            RUN ./node_modules/.bin/cypress run
            # run Cypress using module API and confirm number of passing tests
            RUN ./node_modules/.bin/cypress-expect run --passing 1
            EOF

      - run:
          name: test image << parameters.imageName >> using Kitchensink
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test-kitchensink -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
            WORKDIR /app
            RUN npm init --yes
            RUN npm install --save-dev cypress cypress-expect
            RUN ./node_modules/.bin/cypress verify
            RUN echo '{}' > cypress.json
            # run Cypress and confirm minimum number of passing tets
            RUN ./node_modules/.bin/cypress-expect run --min-passing 100
            EOF

  test-browser-image:
    description: Build a test image from browser image and test it
    parameters:
      imageName:
        type: string
        description: Cypress browser docker image to test
      chromeVersion:
        type: string
        default: ''
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
      firefoxVersion:
        type: string
        default: ''
        description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
      edgeVersion:
        type: string
        default: ''
        description: Edge version to expect in the base image, starts with "Microsoft Edge XX"
    steps:
      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: confirm image has Chrome << parameters.chromeVersion >>
              # do not run Docker in the interactive mode - adds control characters!
              # and use Bash regex string comparison
              command: |
                version=$(docker run << parameters.imageName >> google-chrome --version)
                if [[ "$version" =~ ^"<< parameters.chromeVersion >>" ]]; then
                  echo "Image has the expected version of Chrome << parameters.chromeVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Chrome version"
                  echo "Expected << parameters.chromeVersion >> and got $version"
                  exit 1
                fi

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: confirm the image has Firefox << parameters.firefoxVersion >>
              command: |
                version=$(docker run << parameters.imageName >> firefox --version)
                if [[ "$version" =~ ^"<< parameters.firefoxVersion >>" ]]; then
                  echo "Image has the expected version of Firefox << parameters.firefoxVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Firefox version"
                  echo "Expected << parameters.firefoxVersion >> and got $version"
                  exit 1
                fi

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: confirm the image has Edge << parameters.edgeVersion >>
              command: |
                version=$(docker run << parameters.imageName >> edge --version)
                if [[ "$version" =~ ^"<< parameters.edgeVersion >>" ]]; then
                  echo "Image has the expected version of Edge << parameters.edgeVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Edge version"
                  echo "Expected << parameters.edgeVersion >> and got $version"
                  exit 1
                fi

      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            EOF

      - run:
          name: Test built-in Electron browser
          no_output_timeout: '1m'
          command: docker run cypress/test ./node_modules/.bin/cypress run

      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: Test << parameters.chromeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser chrome

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: Test << parameters.firefoxVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser firefox

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: Test << parameters.edgeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser edge

      - run:
          name: scaffold image << parameters.imageName >> using Kitchensink
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test-kitchensink -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN echo '{}' > cypress.json
            EOF

      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: Test << parameters.chromeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser chrome

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: Test << parameters.firefoxVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser firefox

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: Test << parameters.edgeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser edge

  test-included-image-versions:
    description: Testing pre-installed versions
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: 'Print versions'
          command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version

      - run:
          name: 'Print info'
          command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> info

      - run:
          name: 'Check Node version'
          command: |
            export NODE_VERSION=$(docker run --entrypoint node cypress/included:<< parameters.cypressVersion >> --version)
            export CYPRESS_NODE_VERSION=$(docker run --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version --component node)
            echo "Included Node $NODE_VERSION"
            echo "Cypress includes Node $CYPRESS_NODE_VERSION"
            # "node --version" returns something like "v12.1.2"
            # and "cypres version ..." returns just "12.1.2"
            if [ "$NODE_VERSION" = "v$CYPRESS_NODE_VERSION" ]; then
              echo "Node versions match"
            else
              echo "Node version mismatch 🔥"
              # TODO make sure there are no extra characters in the versions
              # https://github.com/cypress-io/cypress-docker-images/issues/411
              # exit 1
            fi

  test-included-image:
    description: Testing Docker image with Cypress pre-installed
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: New test project and testing
          no_output_timeout: '3m'
          command: |
            node --version
            mkdir test
            cd test
            echo "Initializing test project"
            npx @bahmutov/cly init --cypress-version << parameters.cypressVersion >>

            echo "Testing using Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >>

            echo "Testing using Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >> --browser chrome
          working_directory: /tmp

  test-included-image-using-kitchensink:
    description: Testing Cypress pre-installed using Kitchensink
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: Testing Kitchensink
          no_output_timeout: '3m'
          command: |
            node --version
            mkdir test-kitchensink
            cd test-kitchensink

            npm init -y
            echo '{}' > cypress.json

            echo "Testing using Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_INTERNAL_FORCE_SCAFFOLD=1 cypress/included:<< parameters.cypressVersion >>

            echo "Testing using Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_INTERNAL_FORCE_SCAFFOLD=1 cypress/included:<< parameters.cypressVersion >> --browser chrome

          working_directory: /tmp

  docker-push:
    description: Log in and push a given image to Docker hub
    parameters:
      imageName:
        type: string
        description: Docker image name to push
    steps:
      # before pushing, let's check again that the Docker Hub does not have the image
      # accidental rebuild and overwrite of an image is bad, since it can bump every tool
      # https://github.com/cypress-io/cypress/issues/6335
      - halt-if-docker-image-exists:
          imageName: << parameters.imageName >>
      - run:
          name: Pushing image << parameters.imageName >> to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push << parameters.imageName >>

jobs:
  lint-markdown:
    executor:
      name: node/default
      tag: '12'
    steps:
      - checkout
      - node/with-cache:
          steps:
            - run: npm ci
      - run: npm run check:markdown

  build-base-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/base
      dockerTag:
        type: string
        description: Image tag to build like "12.14.0"
      checkNodeVersion:
        type: boolean
        description: Check if the FROM image name is strict Node version
        default: true
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: base/<< parameters.dockerTag >>

      - test-base-image:
          nodeVersion: v<< parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
          checkNodeVersion: << parameters.checkNodeVersion >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-browser-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/browsers
      dockerTag:
        type: string
        description: Image tag to build like "node12.4.0-chrome76"
      chromeVersion:
        type: string
        default: ''
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
      firefoxVersion:
        type: string
        default: ''
        description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
      edgeVersion:
        type: string
        default: ''
        description: Edge version to expect in the base image, starts with "Microsoft Edge XX"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: browsers/<< parameters.dockerTag >>
      - test-browser-image:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
          chromeVersion: << parameters.chromeVersion >>
          firefoxVersion: << parameters.firefoxVersion >>
          edgeVersion: << parameters.edgeVersion >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-included-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/included
      dockerTag:
        type: string
        description: Image tag to build, should match Cypress version, like "3.8.1"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: included/<< parameters.dockerTag >>

      - test-included-image-versions:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - test-included-image:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - test-included-image-using-kitchensink:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

workflows:
  version: 2
  lint:
    jobs:
      - lint-markdown
  build-base-images:
    jobs:
      - build-base-image:
          name: "base 10.22.0"
          dockerTag: "10.22.0"
      - build-base-image:
          name: "base 12.0.0-libgbm"
          dockerTag: "12.0.0-libgbm"
          checkNodeVersion: false
      - build-base-image:
          name: "base 12.18.3"
          dockerTag: "12.18.3"
      - build-base-image:
          name: "base 12.18.4"
          dockerTag: "12.18.4"
      - build-base-image:
          name: "base 12.19.0"
          dockerTag: "12.19.0"
      - build-base-image:
          name: "base 14.10.1"
          dockerTag: "14.10.1"
      - build-base-image:
          name: "base 14.15.0"
          dockerTag: "14.15.0"
      - build-base-image:
          name: "base 14.15.4"
          dockerTag: "14.15.4"
      - build-base-image:
          name: "base 14.16.0"
          dockerTag: "14.16.0"
      - build-base-image:
          name: "base 14.5.0"
          dockerTag: "14.5.0"
      - build-base-image:
          name: "base 14.7.0"
          dockerTag: "14.7.0"
      - build-base-image:
          name: "base 16.0.0"
          dockerTag: "16.0.0"
      - build-base-image:
          name: "base 16.1.0"
          dockerTag: "16.1.0"
      - build-base-image:
          name: "base 16.2.0"
          dockerTag: "16.2.0"
      - build-base-image:
          name: "base 16.3.0"
          dockerTag: "16.3.0"
      - build-base-image:
          name: "base manjaro-14.12.0"
          dockerTag: "manjaro-14.12.0"
          checkNodeVersion: false

  build-browser-images:
    jobs:
      - build-browser-image:
          name: "browsers node12.14.1-chrome85-ff81"
          dockerTag: "node12.14.1-chrome85-ff81"
          chromeVersion: "Google Chrome 85"
          firefoxVersion: "Mozilla Firefox 81"
      - build-browser-image:
          name: "browsers node12.18.3-chrome83-ff77"
          dockerTag: "node12.18.3-chrome83-ff77"
          chromeVersion: "Google Chrome 83"
          firefoxVersion: "Mozilla Firefox 77"
      - build-browser-image:
          name: "browsers node12.18.3-chrome87-ff82"
          dockerTag: "node12.18.3-chrome87-ff82"
          chromeVersion: "Google Chrome 87"
          firefoxVersion: "Mozilla Firefox 82"
      - build-browser-image:
          name: "browsers node12.18.3-chrome89-ff86"
          dockerTag: "node12.18.3-chrome89-ff86"
          chromeVersion: "Google Chrome 89"
          firefoxVersion: "Mozilla Firefox 86"
      - build-browser-image:
          name: "browsers node12.18.4-edge88"
          dockerTag: "node12.18.4-edge88"
          edgeVersion: "Microsoft Edge 88"
      - build-browser-image:
          name: "browsers node12.19.0-chrome86-ff82"
          dockerTag: "node12.19.0-chrome86-ff82"
          chromeVersion: "Google Chrome 86"
          firefoxVersion: "Mozilla Firefox 82"
      - build-browser-image:
          name: "browsers node13.8.0-chrome81-ff75"
          dockerTag: "node13.8.0-chrome81-ff75"
          chromeVersion: "Google Chrome 81"
          firefoxVersion: "Mozilla Firefox 75"
      - build-browser-image:
          name: "browsers node14.10.1-edge88"
          dockerTag: "node14.10.1-edge88"
          edgeVersion: "Microsoft Edge 88"
      - build-browser-image:
          name: "browsers node14.15.0-chrome86-ff82"
          dockerTag: "node14.15.0-chrome86-ff82"
          chromeVersion: "Google Chrome 86"
          firefoxVersion: "Mozilla Firefox 82"
      - build-browser-image:
          name: "browsers node14.16.0-chrome89-ff77"
          dockerTag: "node14.16.0-chrome89-ff77"
          chromeVersion: "Google Chrome 89"
          firefoxVersion: "Mozilla Firefox 77"
      - build-browser-image:
          name: "browsers node14.16.0-chrome89-ff86"
          dockerTag: "node14.16.0-chrome89-ff86"
          chromeVersion: "Google Chrome 89"
          firefoxVersion: "Mozilla Firefox 86"
      - build-browser-image:
          name: "browsers node14.16.0-chrome90-ff88"
          dockerTag: "node14.16.0-chrome90-ff88"
          chromeVersion: "Google Chrome 90"
          firefoxVersion: "Mozilla Firefox 88"
      - build-browser-image:
          name: "browsers node14.7.0-chrome84"
          dockerTag: "node14.7.0-chrome84"
          chromeVersion: "Google Chrome 84"

  build-included-images:
    jobs:
      - build-included-image:
          name: "included 6.0.0"
          dockerTag: "6.0.0"
      - build-included-image:
          name: "included 6.0.1"
          dockerTag: "6.0.1"
      - build-included-image:
          name: "included 6.1.0"
          dockerTag: "6.1.0"
      - build-included-image:
          name: "included 6.2.0"
          dockerTag: "6.2.0"
      - build-included-image:
          name: "included 6.2.1"
          dockerTag: "6.2.1"
      - build-included-image:
          name: "included 6.3.0"
          dockerTag: "6.3.0"
      - build-included-image:
          name: "included 6.4.0"
          dockerTag: "6.4.0"
      - build-included-image:
          name: "included 6.5.0"
          dockerTag: "6.5.0"
      - build-included-image:
          name: "included 6.6.0"
          dockerTag: "6.6.0"
      - build-included-image:
          name: "included 6.7.0"
          dockerTag: "6.7.0"
      - build-included-image:
          name: "included 6.7.1"
          dockerTag: "6.7.1"
      - build-included-image:
          name: "included 6.8.0"
          dockerTag: "6.8.0"
      - build-included-image:
          name: "included 7.0.0"
          dockerTag: "7.0.0"
      - build-included-image:
          name: "included 7.0.1"
          dockerTag: "7.0.1"
      - build-included-image:
          name: "included 7.1.0"
          dockerTag: "7.1.0"
      - build-included-image:
          name: "included 7.2.0"
          dockerTag: "7.2.0"
      - build-included-image:
          name: "included 7.3.0"
          dockerTag: "7.3.0"
      - build-included-image:
          name: "included 7.4.0"
          dockerTag: "7.4.0"
      - build-included-image:
          name: "included 7.5.0"
          dockerTag: "7.5.0"
