# WARNING: this file is automatically generated by generate-config.js
# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

orbs:
  node: circleci/node@1.1

commands:
  halt-on-branch:
    description: Halt current CircleCI job if not on master branch
    steps:
      - run:
          name: Halting job if not on master branch
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              echo "Not master branch, will skip the rest of commands"
              circleci-agent step halt
            else
              echo "On master branch, can continue"
            fi

  halt-if-docker-image-exists:
    description: Halt current CircleCI job if Docker image exists already
    parameters:
      imageName:
        type: string
        description: Docker image name to test
    steps:
      - run:
          name: Check if image << parameters.imageName >> exists or Docker hub does not respond
          # using https://github.com/cypress-io/docker-image-not-found
          # to check if Docker hub definitely does not have this image
          command: |
            if npx docker-image-not-found --repo << parameters.imageName >>; then
              echo Docker hub says image << parameters.imageName >> does not exist
            else
              echo Docker hub has image << parameters.imageName >> or not responding
              echo We should stop in this case
              circleci-agent step halt
            fi

  test-base-image:
    description: Build a test image from base image and test it
    parameters:
      nodeVersion:
        type: string
        description: Node version to expect in the base image, starts with "v"
      imageName:
        type: string
        description: Cypress base docker image to test
    steps:
      - run:
          name: confirm image has Node << parameters.nodeVersion >>
          # do not run Docker in the interactive mode - adds control characters!
          command: |
            version=$(docker run << parameters.imageName >> node --version)
            if [ "$version" == "<< parameters.nodeVersion >>" ]; then
              echo "Base image has the expected version of Node << parameters.nodeVersion >>";
            else
              echo "Problem: base image has unexpected Node version"
              echo "Expected << parameters.nodeVersion >> and got $version"
              exit 1
            fi
      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            RUN ./node_modules/.bin/cypress run
            EOF

  test-browser-image:
    description: Build a test image from browser image and test it
    parameters:
      imageName:
        type: string
        description: Cypress browser docker image to test
      chromeVersion:
        type: string
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
    steps:
      - run:
          name: confirm image has Chrome << parameters.chromeVersion >>
          # do not run Docker in the interactive mode - adds control characters!
          # and use Bash regex string comparison
          command: |
            version=$(docker run << parameters.imageName >> google-chrome --version)
            if [[ "$version" =~ ^"<< parameters.chromeVersion >>" ]]; then
              echo "Image has the expected version of Chrome << parameters.chromeVersion >>"
              echo "found $version"
            else
              echo "Problem: image has unexpected Chrome version"
              echo "Expected << parameters.chromeVersion >> and got $version"
              exit 1
            fi
      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          # for now assuming Chrome, in the future can pass browser name as a parameter
          command: |
            docker build -t cypress/test -\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            RUN ./node_modules/.bin/cypress run --browser chrome
            EOF

  test-included-image:
    description: Testing Docker image with Cypress pre-installed
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: New test project and testing
          no_output_timeout: '3m'
          command: |
            node --version
            mkdir test
            cd test
            echo "Initializing test project"
            npx @bahmutov/cly init --cypress-version << parameters.cypressVersion >>

            echo "Testing Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >>

            echo "Testing Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >> --browser chrome
          working_directory: /tmp

  docker-push:
    description: Log in and push a given image to Docker hub
    parameters:
      imageName:
        type: string
        description: Docker image name to push
    steps:
      # before pushing, let's check again that the Docker Hub does not have the image
      # accidental rebuild and overwrite of an image is bad, since it can bump every tool
      # https://github.com/cypress-io/cypress/issues/6335
      - halt-if-docker-image-exists:
          imageName: << parameters.imageName >>
      - run:
          name: Pushing image << parameters.imageName >> to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push << parameters.imageName >>

jobs:
  lint-markdown:
    executor:
      name: node/default
      tag: '12'
    steps:
      - checkout
      - node/with-cache:
          steps:
            - run: npm ci
      - run: npm run check:markdown

  build-base-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/base
      dockerTag:
        type: string
        description: Image tag to build like "12.14.0"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: base/<< parameters.dockerTag >>

      - test-base-image:
          nodeVersion: v<< parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-browser-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/browsers
      dockerTag:
        type: string
        description: Image tag to build like "node12.4.0-chrome76"
      chromeVersion:
        type: string
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: browsers/<< parameters.dockerTag >>

      - test-browser-image:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
          chromeVersion: << parameters.chromeVersion >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-included-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/included
      dockerTag:
        type: string
        description: Image tag to build, should match Cypress version, like "3.8.1"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: included/<< parameters.dockerTag >>

      - test-included-image:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

workflows:
  version: 2
  lint:
    jobs:
      - lint-markdown
  build-base-images:
    jobs:
      - build-base-image:
          name: "base 10"
          dockerTag: "10"
      - build-base-image:
          name: "base 10.11.0"
          dockerTag: "10.11.0"
      - build-base-image:
          name: "base 10.15.3"
          dockerTag: "10.15.3"
      - build-base-image:
          name: "base 10.16.0"
          dockerTag: "10.16.0"
      - build-base-image:
          name: "base 10.18.0"
          dockerTag: "10.18.0"
      - build-base-image:
          name: "base 10.18.1"
          dockerTag: "10.18.1"
      - build-base-image:
          name: "base 10.2.1"
          dockerTag: "10.2.1"
      - build-base-image:
          name: "base 11.13.0"
          dockerTag: "11.13.0"
      - build-base-image:
          name: "base 12.0.0"
          dockerTag: "12.0.0"
      - build-base-image:
          name: "base 12.1.0"
          dockerTag: "12.1.0"
      - build-base-image:
          name: "base 12.12.0"
          dockerTag: "12.12.0"
      - build-base-image:
          name: "base 12.13.0"
          dockerTag: "12.13.0"
      - build-base-image:
          name: "base 12.14.0"
          dockerTag: "12.14.0"
      - build-base-image:
          name: "base 12.4.0"
          dockerTag: "12.4.0"
      - build-base-image:
          name: "base 12.6.0"
          dockerTag: "12.6.0"
      - build-base-image:
          name: "base 12.8.1"
          dockerTag: "12.8.1"
      - build-base-image:
          name: "base 13.1.0"
          dockerTag: "13.1.0"
      - build-base-image:
          name: "base 13.3.0"
          dockerTag: "13.3.0"
      - build-base-image:
          name: "base 13.6.0"
          dockerTag: "13.6.0"
      - build-base-image:
          name: "base 6"
          dockerTag: "6"
      - build-base-image:
          name: "base 8"
          dockerTag: "8"
      - build-base-image:
          name: "base 8.15.1"
          dockerTag: "8.15.1"
      - build-base-image:
          name: "base 8.16.0"
          dockerTag: "8.16.0"
      - build-base-image:
          name: "base 8.2.1"
          dockerTag: "8.2.1"
      - build-base-image:
          name: "base 8.9.3"
          dockerTag: "8.9.3"
      - build-base-image:
          name: "base 8.9.3-npm-6.10.1"
          dockerTag: "8.9.3-npm-6.10.1"
      - build-base-image:
          name: "base centos7"
          dockerTag: "centos7"
      - build-base-image:
          name: "base centos7-12.4.0"
          dockerTag: "centos7-12.4.0"
      - build-base-image:
          name: "base ubuntu16"
          dockerTag: "ubuntu16"
      - build-base-image:
          name: "base ubuntu16-12.13.1"
          dockerTag: "ubuntu16-12.13.1"
      - build-base-image:
          name: "base ubuntu16-8"
          dockerTag: "ubuntu16-8"
      - build-base-image:
          name: "base ubuntu18-node12.14.1"
          dockerTag: "ubuntu18-node12.14.1"
      - build-base-image:
          name: "base ubuntu19-node12.14.1"
          dockerTag: "ubuntu19-node12.14.1"

  build-browser-images:
    jobs:
      - build-browser-image:
          name: "browsers chrome65-ff57"
          dockerTag: "chrome65-ff57"
          chromeVersion: "Google Chrome 65"
      - build-browser-image:
          name: "browsers chrome67"
          dockerTag: "chrome67"
          chromeVersion: "Google Chrome 67"
      - build-browser-image:
          name: "browsers chrome67-ff57"
          dockerTag: "chrome67-ff57"
          chromeVersion: "Google Chrome 67"
      - build-browser-image:
          name: "browsers chrome69"
          dockerTag: "chrome69"
          chromeVersion: "Google Chrome 69"
      - build-browser-image:
          name: "browsers node10.11.0-chrome75"
          dockerTag: "node10.11.0-chrome75"
          chromeVersion: "Google Chrome 75"
      - build-browser-image:
          name: "browsers node10.16.0-chrome76"
          dockerTag: "node10.16.0-chrome76"
          chromeVersion: "Google Chrome 76"
      - build-browser-image:
          name: "browsers node10.16.0-chrome77"
          dockerTag: "node10.16.0-chrome77"
          chromeVersion: "Google Chrome 77"
      - build-browser-image:
          name: "browsers node10.16.0-chrome77-ff71"
          dockerTag: "node10.16.0-chrome77-ff71"
          chromeVersion: "Google Chrome 77"
      - build-browser-image:
          name: "browsers node10.2.1-chrome74"
          dockerTag: "node10.2.1-chrome74"
          chromeVersion: "Google Chrome 74"
      - build-browser-image:
          name: "browsers node11.13.0-chrome73"
          dockerTag: "node11.13.0-chrome73"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node12.0.0-chrome73"
          dockerTag: "node12.0.0-chrome73"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node12.0.0-chrome73-ff68"
          dockerTag: "node12.0.0-chrome73-ff68"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node12.0.0-chrome75"
          dockerTag: "node12.0.0-chrome75"
          chromeVersion: "Google Chrome 75"
      - build-browser-image:
          name: "browsers node12.13.0-chrome78-ff70"
          dockerTag: "node12.13.0-chrome78-ff70"
          chromeVersion: "Google Chrome 78"
      - build-browser-image:
          name: "browsers node12.13.0-chrome78-ff70-brave78"
          dockerTag: "node12.13.0-chrome78-ff70-brave78"
          chromeVersion: "Google Chrome 78"
      - build-browser-image:
          name: "browsers node12.14.0-chrome79-ff71"
          dockerTag: "node12.14.0-chrome79-ff71"
          chromeVersion: "Google Chrome 79"
      - build-browser-image:
          name: "browsers node12.4.0-chrome76"
          dockerTag: "node12.4.0-chrome76"
          chromeVersion: "Google Chrome 76"
      - build-browser-image:
          name: "browsers node12.6.0-chrome75"
          dockerTag: "node12.6.0-chrome75"
          chromeVersion: "Google Chrome 75"
      - build-browser-image:
          name: "browsers node12.6.0-chrome77"
          dockerTag: "node12.6.0-chrome77"
          chromeVersion: "Google Chrome 77"
      - build-browser-image:
          name: "browsers node12.8.1-chrome78-ff70"
          dockerTag: "node12.8.1-chrome78-ff70"
          chromeVersion: "Google Chrome 78"
      - build-browser-image:
          name: "browsers node12.8.1-chrome80-ff72"
          dockerTag: "node12.8.1-chrome80-ff72"
          chromeVersion: "Google Chrome 80"
      - build-browser-image:
          name: "browsers node13.1.0-chrome78-ff70"
          dockerTag: "node13.1.0-chrome78-ff70"
          chromeVersion: "Google Chrome 78"
      - build-browser-image:
          name: "browsers node13.3.0-chrome79-ff70"
          dockerTag: "node13.3.0-chrome79-ff70"
          chromeVersion: "Google Chrome 79"
      - build-browser-image:
          name: "browsers node13.6.0-chrome80-ff72"
          dockerTag: "node13.6.0-chrome80-ff72"
          chromeVersion: "Google Chrome 80"
      - build-browser-image:
          name: "browsers node8.15.1-chrome73"
          dockerTag: "node8.15.1-chrome73"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node8.2.1-chrome73"
          dockerTag: "node8.2.1-chrome73"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node8.9.3-chrome73"
          dockerTag: "node8.9.3-chrome73"
          chromeVersion: "Google Chrome 73"
      - build-browser-image:
          name: "browsers node8.9.3-npm6.10.1-chrome75"
          dockerTag: "node8.9.3-npm6.10.1-chrome75"
          chromeVersion: "Google Chrome 75"
      - build-browser-image:
          name: "browsers node8.9.3-npm6.10.1-chrome76-ff68"
          dockerTag: "node8.9.3-npm6.10.1-chrome76-ff68"
          chromeVersion: "Google Chrome 76"

  build-included-images:
    jobs:
      - build-included-image:
          name: "included 3.2.0"
          dockerTag: "3.2.0"
      - build-included-image:
          name: "included 3.3.0"
          dockerTag: "3.3.0"
      - build-included-image:
          name: "included 3.3.1"
          dockerTag: "3.3.1"
      - build-included-image:
          name: "included 3.3.2"
          dockerTag: "3.3.2"
      - build-included-image:
          name: "included 3.4.0"
          dockerTag: "3.4.0"
      - build-included-image:
          name: "included 3.4.1"
          dockerTag: "3.4.1"
      - build-included-image:
          name: "included 3.5.0"
          dockerTag: "3.5.0"
      - build-included-image:
          name: "included 3.6.0"
          dockerTag: "3.6.0"
      - build-included-image:
          name: "included 3.6.1"
          dockerTag: "3.6.1"
      - build-included-image:
          name: "included 3.7.0"
          dockerTag: "3.7.0"
      - build-included-image:
          name: "included 3.8.0"
          dockerTag: "3.8.0"
      - build-included-image:
          name: "included 3.8.1"
          dockerTag: "3.8.1"
      - build-included-image:
          name: "included 3.8.2"
          dockerTag: "3.8.2"
      - build-included-image:
          name: "included 3.8.3"
          dockerTag: "3.8.3"
      - build-included-image:
          name: "included 4.0.0"
          dockerTag: "4.0.0"
      - build-included-image:
          name: "included 4.0.1"
          dockerTag: "4.0.1"
      - build-included-image:
          name: "included 4.0.2"
          dockerTag: "4.0.2"
