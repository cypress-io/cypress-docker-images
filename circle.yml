# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

orbs:
    node: circleci/node@5.0.0

commands:
    expand-env-file:
        description: sets up bash env to load envs from the env file
        steps:
            - run:
                   name: sets up bash env to load envs from the env file
                   command: |
                        echo "$BASH_ENV"
                        touch $BASH_ENV
                        echo 'set -a && . ~/project/factory/.env && set +a' >> $BASH_ENV
                        cat $BASH_ENV
    halt-if-docker-image-exists:
        description: Halt current CircleCI job if Docker image exists already
        parameters:
            target:
                type: string
                description: docker-compose target being tested
        steps:
            - run:
                  name: Check if image for << parameters.target >> exists or Docker hub does not respond
                  # using https://github.com/cypress-io/docker-image-not-found
                  # to check if Docker hub definitely does not have this image
                  command: |
                      DOCKER_TAG=''
                      if [ << parameters.target >> == factory ]; then DOCKER_TAG=cypress/factory:${FACTORY_VERSION}; fi
                      if [ << parameters.target >> == base ]; then DOCKER_TAG=cypress/base:${BASE_IMAGE_TAG}; fi
                      if [ << parameters.target >> == browsers ]; then DOCKER_TAG=cypress/browsers:${BROWSERS_IMAGE_TAG}; fi
                      if [ << parameters.target >> == included ]; then DOCKER_TAG=cypress/included:${INCLUDED_IMAGE_TAG}; fi

                      if npx docker-image-not-found --repo $DOCKER_TAG; then
                        echo Docker hub says image $DOCKER_TAG does not exist
                      else
                        echo Docker hub has image $DOCKER_TAG or not responding
                        echo We should stop in this case
                        circleci-agent step halt
                      fi
    # test-base-image:
    #     description: Build a test image from base image and test it
    #     parameters:
    #         nodeVersion:
    #             type: string
    #             description: Node version to expect in the base image, starts with "v"
    #         imageName:
    #             type: string
    #             description: Cypress base docker image to test
    #     steps:
    #         - run:
    #               name: test image << parameters.imageName >> against Kitchensink
    #               no_output_timeout: '3m'
    #               working_directory: '~/project/test-project'
    #               command: |
    #                   node --version
    #                   npm i cypress@latest

    #                   echo "Testing using Electron browser"
    #                   docker run -it -v $PWD:/e2e -w /e2e << parameters.imageName >> sh -c "./node_modules/.bin/cypress install && ./node_modules/.bin/cypress run"

    # test-browser-image:
    #     description: Build a test image from browser image and test it
    #     parameters:
    #         imageName:
    #             type: string
    #             description: Cypress browser docker image to test
    #         chromeVersion:
    #             type: string
    #             default: ''
    #             description: Chrome version to expect in the base image, starts with "Google Chrome XX"
    #         firefoxVersion:
    #             type: string
    #             default: ''
    #             description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
    #         edgeVersion:
    #             type: string
    #             default: ''
    #             description: Edge version to expect in the base image, starts with "Microsoft Edge"
    #     steps:
    #         - when:
    #               condition: << parameters.chromeVersion >>
    #               steps:
    #                   - run:
    #                         name: confirm image has Chrome << parameters.chromeVersion >>
    #                         # do not run Docker in the interactive mode - adds control characters!
    #                         # and use Bash regex string comparison
    #                         command: |
    #                             if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                                 echo "Chrome does not support arm64 yet, skipping"
    #                                 exit 0
    #                             fi
    #                             version=$(docker run << parameters.imageName >> google-chrome --version)
    #                             if [[ "$version" =~ ^"<< parameters.chromeVersion >>" ]]; then
    #                               echo "Image has the expected version of Chrome << parameters.chromeVersion >>"
    #                               echo "found $version"
    #                             else
    #                               echo "Problem: image has unexpected Chrome version"
    #                               echo "Expected << parameters.chromeVersion >> and got $version"
    #                               exit 1
    #                             fi

    #         - when:
    #               condition: << parameters.firefoxVersion >>
    #               steps:
    #                   - run:
    #                         name: confirm the image has Firefox << parameters.firefoxVersion >>
    #                         command: |
    #                             if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                                 echo "Firefox does not support arm64 yet, skipping"
    #                                 exit 0
    #                             fi
    #                             version=$(docker run << parameters.imageName >> firefox --version)
    #                             if [[ "$version" =~ ^"<< parameters.firefoxVersion >>" ]]; then
    #                               echo "Image has the expected version of Firefox << parameters.firefoxVersion >>"
    #                               echo "found $version"
    #                             else
    #                               echo "Problem: image has unexpected Firefox version"
    #                               echo "Expected << parameters.firefoxVersion >> and got $version"
    #                               exit 1
    #                             fi

    #         - when:
    #               condition: << parameters.edgeVersion >>
    #               steps:
    #                   - run:
    #                         name: confirm the image has Edge << parameters.edgeVersion >>
    #                         command: |
    #                             if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                                 echo "Edge does not support arm64 yet, skipping"
    #                                 exit 0
    #                             fi
    #                             version=$(docker run << parameters.imageName >> edge --version)
    #                             if [[ "$version" ]]; then
    #                               echo "Image has the a version of Edge << parameters.edgeVersion >>"
    #                               echo "found $version"
    #                             else
    #                               echo "Problem: image has no Edge version"
    #                               echo "Expected to have $version"
    #                               exit 1
    #                             fi

    #         - run:
    #             name: test image << parameters.imageName >> w Kitchensink
    #             no_output_timeout: '3m'
    #             command: |
    #                 sed -i.bak "s|InsertBaseImageHere|<< parameters.imageName >>|g" ./test/Dockerfile.test-project
    #                 docker build -t cypress/test -f ./test/Dockerfile.test-project .

    #         - run:
    #               name: Test built-in Electron browser
    #               no_output_timeout: '1m'
    #               command: docker run cypress/test ./node_modules/.bin/cypress run

    #         - when:
    #               condition: << parameters.chromeVersion >>
    #               steps:
    #                   - run:
    #                         name: Test << parameters.chromeVersion >>
    #                         no_output_timeout: '1m'
    #                         command: |
    #                           if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                             echo "Chrome does not support arm64 yet, skipping"
    #                             exit 0
    #                           fi
    #                           docker run cypress/test ./node_modules/.bin/cypress run --browser chrome

    #         - when:
    #               condition: << parameters.firefoxVersion >>
    #               steps:
    #                   - run:
    #                         name: Test << parameters.firefoxVersion >>
    #                         no_output_timeout: '1m'
    #                         command: |
    #                           if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                             echo "Firefox does not support arm64 yet, skipping"
    #                             exit 0
    #                           fi
    #                           docker run cypress/test ./node_modules/.bin/cypress run --browser firefox

    #         - when:
    #               condition: << parameters.edgeVersion >>
    #               steps:
    #                   - run:
    #                         name: Test << parameters.edgeVersion >>
    #                         no_output_timeout: '1m'
    #                         command: |
    #                           if [[ "$(node -p process.arch)" == 'arm64' ]]; then
    #                             echo "Edge does not support arm64 yet, skipping"
    #                             exit 0
    #                           fi
    #                           docker run cypress/test ./node_modules/.bin/cypress run --browser edge

    # test-included-image-versions:
    #     description: Testing pre-installed versions
    #     parameters:
    #         cypressVersion:
    #             type: string
    #             description: Cypress version to test, like "4.0.0"
    #         imageName:
    #             type: string
    #             description: Cypress included docker image to test
    #     steps:
    #         - run:
    #               name: 'Print versions'
    #               command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version

    #         - run:
    #               name: 'Print info'
    #               command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> info

    #         - run:
    #               name: 'Check Node version'
    #               command: |
    #                   export NODE_VERSION=$(docker run --entrypoint node cypress/included:<< parameters.cypressVersion >> --version)
    #                   export CYPRESS_NODE_VERSION=$(docker run --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version --component node)
    #                   echo "Included Node $NODE_VERSION"
    #                   echo "Cypress includes Node $CYPRESS_NODE_VERSION"
    #                   # "node --version" returns something like "v12.1.2"
    #                   # and "cypres version ..." returns just "12.1.2"
    #                   if [ "$NODE_VERSION" = "v$CYPRESS_NODE_VERSION" ]; then
    #                     echo "Node versions match"
    #                   else
    #                     echo "Node version mismatch 🔥"
    #                     # TODO make sure there are no extra characters in the versions
    #                     # https://github.com/cypress-io/cypress-docker-images/issues/411
    #                     # exit 1
    #                   fi

jobs:
    # test-factory-image:
    #     machine:
    #         image: ubuntu-2204:2022.10.2
    #     parameters:
    #         resourceClass:
    #             type: string
    #             description: Resource class to use for this job
    #         target:
    #             type: string
    #             description: The docker-compose target to run
    #     resource_class: << parameters.resourceClass >>
    #     steps:
    #         - checkout
    #         - expand-env-file
    #         - run:
    #               name: building Docker image cypress/factory
    #               command: |
    #                   docker-compose build --progress plain factory
    #               working_directory: factory
    #         - run:
    #               name: test
    #               no_output_timeout: 30m
    #               command: |
    #                 docker-compose build --progress plain << parameters.target >>
    #                 docker-compose run << parameters.target >>
    #               working_directory: factory/test-project

    test-image:
        machine:
            image: ubuntu-2204:2022.10.2
        parameters:
            target:
                type: string
                description: The docker-compose target to build
            resourceClass:
                type: string
                description: Resource class to use for this job
            test-target:
                type: string
                description: The docker-compose target to run the test
        resource_class: << parameters.resourceClass >>
        steps:
            - checkout
            - expand-env-file
            - run:
                  name: building docker image
                  command: |
                      if [ << parameters.target >> != factory ]; then docker-compose build --progress plain factory; fi
                      docker-compose build --progress plain << parameters.target >>
                  working_directory: factory
            - run:
                  name: test
                  no_output_timeout: 30m
                  command: |
                    docker-compose build --progress plain << parameters.test-target >>
                    docker-compose run << parameters.test-target >>
                  working_directory: factory/test-project

    push:
        machine:
            image: ubuntu-2204:2022.10.2
        parameters:
            target:
                type: string
                description: Name of the docker-compose target to build and push.
        steps:
            - checkout
            - expand-env-file
            - halt-if-docker-image-exists:
                 target: << parameters.target >>
            - run:
                name: building Docker image for target << parameters.target >>
                command: |
                    ## see https://docs.docker.com/desktop/multi-arch/
                    docker run --privileged --rm tonistiigi/binfmt --install linux/amd64,linux/arm64
                    docker buildx create --name builder --use

                    docker login -u "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_PASS"
                    docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push << parameters.target >>

                    ## now, let's re-build those same images for Amazon ECR this is basically a re-tag and push because of the cache from the previous build.
                    ## see https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html
                    docker login --username AWS --password "$(aws ecr-public get-login-password --region $AWS_ECR_REGION)" $AWS_ECR_PREFIX
                    REPO_PREFIX=$AWS_ECR_PREFIX docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push << parameters.target >>

                working_directory: factory

workflows:
    version: 2
    test:
        jobs:
            - test-image:
                matrix:
                    alias: factory-arm
                    parameters:
                        test-target: [
                            test-factory-electron,
                            test-factory-cypress-included-electron,
                            test-factory-all-included-electron-only
                        ]
                        resourceClass: [arm.medium]
                        target: [factory]
            # TODO: could add a version check job
            - test-image:
                matrix:
                    alias: factory
                    parameters:
                        test-target: [
                            test-factory-electron,
                            test-factory-chrome,
                            test-factory-firefox,
                            test-factory-edge,
                            test-factory-cypress-included-electron,
                            test-factory-cypress-included-chrome,
                            test-factory-cypress-included-firefox,
                            test-factory-cypress-included-edge,
                            test-factory-all-included
                        ]
                        resourceClass: [medium]
                        target: [factory]
            - test-image:
                matrix:
                    alias: base
                    parameters:
                        test-target: [
                            test-base
                        ]
                        resourceClass: [medium]
                        target: [base]
            - test-image:
                matrix:
                    alias: base-arm
                    parameters:
                        test-target: [
                            test-base
                        ]
                        resourceClass: [arm.medium]
                        target: [base]
            - test-image:
                matrix:
                    alias: browsers
                    parameters:
                        test-target: [
                            test-browsers-electron,
                            test-browsers-chrome,
                            test-browsers-firefox,
                            test-browsers-edge
                        ]
                        resourceClass: [medium]
                        target: [browsers]

            - test-image:
                matrix:
                    alias: browsers-arm
                    parameters:
                        test-target: [
                            test-browsers-electron
                        ]
                        resourceClass: [arm.medium]
                        target: [browsers]
            - test-image:
                matrix:
                    alias: included
                    parameters:
                        test-target: [
                            test-included-electron,
                            test-included-chrome,
                            test-included-firefox,
                            test-included-edge
                        ]
                        resourceClass: [medium]
                        target: [included]
            - test-image:
                matrix:
                    alias: included-arm
                    parameters:
                        test-target: [
                            test-included-electron
                        ]
                        resourceClass: [arm.medium]
                        target: [included]
            # pushing the factory image must come first because the other images will pull it down to build
            - push:
                name: "Push Factory Image"
                target: factory
                filters:
                    branches:
                        only:  # only branches matching the below regex filters will run
                            - master
                requires:
                    - factory
                    - factory-arm
            - push:
                name: "Push Base Image"
                target: base
                filters:
                    branches:
                        only:  # only branches matching the below regex filters will run
                            - master
                requires:
                    - "Push Factory Image"
                    - base
                    - base-arm
            - push:
                name: "Push Browser Image"
                target: browsers
                filters:
                    branches:
                        only:  # only branches matching the below regex filters will run
                            - master
                requires:
                    - "Push Factory Image"
                    - browsers
                    - browsers-arm
            - push:
                target: included
                name: "Push Included Image"
                filters:
                    branches:
                        only:  # only branches matching the below regex filters will run
                            - master
                requires:
                    - "Push Factory Image"
                    - included
                    - included-arm
