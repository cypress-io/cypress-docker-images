// creates new folder base/<version tag> with Dockerfile and README file
const path = require('path')
const fs = require('fs')
const os = require('os')
const shelljs = require('shelljs')
const { isStrictSemver } = require('../utils')
const { camelCase } = require('lodash')

const versionTag = process.argv[2]

if (!versionTag || !isStrictSemver(versionTag)) {
  console.error('expected version tag argument like "13.6.0"')
  process.exit(1)
}

const outputFolder = path.join('base', versionTag)
if (shelljs.test('-d', outputFolder)) {
  console.log('removing existing folder "%s"', outputFolder)
  shelljs.rm('-rf', outputFolder)
}
console.log('creating "%s"', outputFolder)
shelljs.mkdir(outputFolder)

const Dockerfile = `
# WARNING: this file was autogenerated by ${path.basename(__filename)}
# contains all dependencies for running Cypress.io Test Runner
# https://on.cypress.io/docker and https://on.cypress.io/ci
#
# build it with command
#   docker build -t cypress/base:${versionTag} .
#
FROM node:${versionTag}-buster

RUN apt-get update && \\
  apt-get install --no-install-recommends -y \\
  libgtk2.0-0 \\
  libgtk-3-0 \\
  libnotify-dev \\
  libgconf-2-4 \\
  libgbm-dev \\
  libnss3 \\
  libxss1 \\
  libasound2 \\
  libxtst6 \\
  xauth \\
  xvfb \\
  # install text editors
  vim-tiny \\
  nano \\
  # install emoji font
  fonts-noto-color-emoji \\
  # install Chinese fonts
  # this list was copied from https://github.com/jim3ma/docker-leanote
  fonts-arphic-bkai00mp \\
  fonts-arphic-bsmi00lp \\
  fonts-arphic-gbsn00lp \\
  fonts-arphic-gkai00mp \\
  fonts-arphic-ukai \\
  fonts-arphic-uming \\
  ttf-wqy-zenhei \\
  ttf-wqy-microhei \\
  xfonts-wqy \\
  # clean up
  && rm -rf /var/lib/apt/lists/* \\
  && apt-get clean

RUN npm --version

RUN npm install -g yarn@latest --force
RUN yarn --version

# a few environment variables to make NPM installs easier
# good colors for most applications
ENV TERM xterm
# avoid million NPM install messages
ENV npm_config_loglevel warn
# allow installing when the main user is root
ENV npm_config_unsafe_perm true

# Node libraries
RUN node -p process.versions

# Show where Node loads required modules from
RUN node -p 'module.paths'

# versions of local tools
RUN echo  " node version:    $(node -v) \\n" \\
  "npm version:     $(npm -v) \\n" \\
  "yarn version:    $(yarn -v) \\n" \\
  "debian version:  $(cat /etc/debian_version) \\n" \\
  "user:            $(whoami) \\n"
`
const dockerFilename = path.join(outputFolder, 'Dockerfile')
fs.writeFileSync(dockerFilename, Dockerfile.trim() + '\n', 'utf8')
console.log('Saved %s', dockerFilename)

const README = `
<!-- WARNING: this file was autogenerated by ${path.basename(__filename)} -->
# cypress/base:${versionTag}

A Docker image with all dependencies pre-installed.
Just add your NPM packages (including Cypress) and run the tests.
See [Cypress Docker docs](https://on.cypress.io/docker) and
[Cypress CI guide](https://on.cypress.io/ci).

## Example

Sample Dockerfile

\`\`\`
FROM cypress/base:${versionTag}
RUN npm install --save-dev cypress
RUN $(npm bin)/cypress verify
RUN $(npm bin)/cypress run
\`\`\`
`

const readmeFilename = path.join(outputFolder, 'README.md')
fs.writeFileSync(readmeFilename, README.trim() + '\n', 'utf8')
console.log('Saved %s', readmeFilename)

// to make building images simpler and to follow the same pattern as previous builds
const buildScript = `
# WARNING: this file was autogenerated by ${path.basename(__filename)}
set e+x

# build image with Cypress dependencies
LOCAL_NAME=cypress/base:${versionTag}

echo "Building $LOCAL_NAME"
docker build -t $LOCAL_NAME .
`

const buildFilename = path.join(outputFolder, 'build.sh')
fs.writeFileSync(buildFilename, buildScript.trim() + '\n', 'utf8')
shelljs.chmod('a+x', buildFilename)
console.log('Saved %s', buildFilename)

console.log(`
Please add the newly generated folder ${outputFolder} to Git and update CircleCI file with

    npm run build

Build the Docker container locally to make sure it is correct and update "base/README.md" list
of images with the new image information.
`)

// Generate Base Config

const awsCodeBuildPreamble = `
version: 0.2
env:
  variables:
    PUBLIC_ECR_ALIAS: "cypress-io"

batch:
  fast-fail: false
  build-list:`

const awsCodeBuildPostamble = `

phases:
  pre_build:
    commands:
      - aws --version
      - echo Check if $IMAGE_TAG is in ECR...
      - ./find-ecr-image.sh $IMAGE_REPO_NAME $IMAGE_TAG -p
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - aws ecr-public get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin public.ecr.aws/$PUBLIC_ECR_ALIAS
  build:
    commands:
      - echo Building the Docker image...          
      - cd $IMAGE_DIR/$IMAGE_TAG
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG public.ecr.aws/$PUBLIC_ECR_ALIAS/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push public.ecr.aws/$PUBLIC_ECR_ALIAS/$IMAGE_REPO_NAME:$IMAGE_TAG
`

const preamble = `
# WARNING: this file is automatically generated by ${path.basename(__filename)}
# info on building Docker images on Circle
# https://circleci.com/docs/2.0/building-docker-images/
version: 2.1

orbs:
  node: circleci/node@1.1

commands:
  halt-on-branch:
    description: Halt current CircleCI job if not on master branch
    steps:
      - run:
          name: Halting job if not on master branch
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              echo "Not master branch, will skip the rest of commands"
              circleci-agent step halt
            else
              echo "On master branch, can continue"
            fi

  halt-if-docker-image-exists:
    description: Halt current CircleCI job if Docker image exists already
    parameters:
      imageName:
        type: string
        description: Docker image name to test
    steps:
      - run:
          name: Check if image << parameters.imageName >> exists or Docker hub does not respond
          # using https://github.com/cypress-io/docker-image-not-found
          # to check if Docker hub definitely does not have this image
          command: |
            if npx docker-image-not-found --repo << parameters.imageName >>; then
              echo Docker hub says image << parameters.imageName >> does not exist
            else
              echo Docker hub has image << parameters.imageName >> or not responding
              echo We should stop in this case
              circleci-agent step halt
            fi

  test-base-image:
    description: Build a test image from base image and test it
    parameters:
      nodeVersion:
        type: string
        description: Node version to expect in the base image, starts with "v"
      imageName:
        type: string
        description: Cypress base docker image to test
      checkNodeVersion:
        type: boolean
        description: Check if the FROM image name is strict Node version
        default: true
    steps:
      - when:
          condition: << parameters.checkNodeVersion >>
          steps:
          - run:
              name: confirm image has Node << parameters.nodeVersion >>
              # do not run Docker in the interactive mode - adds control characters!
              command: |
                version=$(docker run << parameters.imageName >> node --version)
                if [ "$version" == "<< parameters.nodeVersion >>" ]; then
                  echo "Base image has the expected version of Node << parameters.nodeVersion >>";
                else
                  echo "Problem: base image has unexpected Node version"
                  echo "Expected << parameters.nodeVersion >> and got $version"
                  exit 1
                fi
      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test -\\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            WORKDIR /app
            RUN npm init --yes
            RUN npm install --save-dev cypress cypress-expect
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            # run Cypress by itself
            RUN ./node_modules/.bin/cypress run
            # run Cypress using module API and confirm number of passing tests
            RUN ./node_modules/.bin/cypress-expect run --passing 1
            EOF

      - run:
          name: test image << parameters.imageName >> using Kitchensink
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test-kitchensink -\\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
            WORKDIR /app
            RUN npm init --yes
            RUN npm install --save-dev cypress cypress-expect
            RUN ./node_modules/.bin/cypress verify
            RUN echo '{}' > cypress.json
            # run Cypress and confirm minimum number of passing tets
            RUN ./node_modules/.bin/cypress-expect run --min-passing 100
            EOF

  test-browser-image:
    description: Build a test image from browser image and test it
    parameters:
      imageName:
        type: string
        description: Cypress browser docker image to test
      chromeVersion:
        type: string
        default: ''
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
      firefoxVersion:
        type: string
        default: ''
        description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
      edgeVersion:
        type: string
        default: ''
        description: Edge version to expect in the base image, starts with "Microsoft Edge XX"
    steps:
      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: confirm image has Chrome << parameters.chromeVersion >>
              # do not run Docker in the interactive mode - adds control characters!
              # and use Bash regex string comparison
              command: |
                version=$(docker run << parameters.imageName >> google-chrome --version)
                if [[ "$version" =~ ^"<< parameters.chromeVersion >>" ]]; then
                  echo "Image has the expected version of Chrome << parameters.chromeVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Chrome version"
                  echo "Expected << parameters.chromeVersion >> and got $version"
                  exit 1
                fi

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: confirm the image has Firefox << parameters.firefoxVersion >>
              command: |
                version=$(docker run << parameters.imageName >> firefox --version)
                if [[ "$version" =~ ^"<< parameters.firefoxVersion >>" ]]; then
                  echo "Image has the expected version of Firefox << parameters.firefoxVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Firefox version"
                  echo "Expected << parameters.firefoxVersion >> and got $version"
                  exit 1
                fi

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: confirm the image has Edge << parameters.edgeVersion >>
              command: |
                version=$(docker run << parameters.imageName >> edge --version)
                if [[ "$version" =~ ^"<< parameters.edgeVersion >>" ]]; then
                  echo "Image has the expected version of Edge << parameters.edgeVersion >>"
                  echo "found $version"
                else
                  echo "Problem: image has unexpected Edge version"
                  echo "Expected << parameters.edgeVersion >> and got $version"
                  exit 1
                fi

      - run:
          name: test image << parameters.imageName >>
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test -\\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN npx @bahmutov/cly init
            EOF

      - run:
          name: Test built-in Electron browser
          no_output_timeout: '1m'
          command: docker run cypress/test ./node_modules/.bin/cypress run

      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: Test << parameters.chromeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser chrome

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: Test << parameters.firefoxVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser firefox

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: Test << parameters.edgeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test ./node_modules/.bin/cypress run --browser edge

      - run:
          name: scaffold image << parameters.imageName >> using Kitchensink
          no_output_timeout: '3m'
          command: |
            docker build -t cypress/test-kitchensink -\\<<EOF
            FROM << parameters.imageName >>
            RUN echo "current user: $(whoami)"
            ENV CI=1
            ENV CYPRESS_INTERNAL_FORCE_SCAFFOLD=1
            RUN npm init --yes
            RUN npm install --save-dev cypress
            RUN ./node_modules/.bin/cypress verify
            RUN echo '{}' > cypress.json
            EOF

      - when:
          condition: << parameters.chromeVersion >>
          steps:
          - run:
              name: Test << parameters.chromeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser chrome

      - when:
          condition: << parameters.firefoxVersion >>
          steps:
          - run:
              name: Test << parameters.firefoxVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser firefox

      - when:
          condition: << parameters.edgeVersion >>
          steps:
          - run:
              name: Test << parameters.edgeVersion >>
              no_output_timeout: '1m'
              command: docker run cypress/test-kitchensink ./node_modules/.bin/cypress run --browser edge

  test-included-image-versions:
    description: Testing pre-installed versions
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: 'Print versions'
          command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version

      - run:
          name: 'Print info'
          command: docker run -it --entrypoint cypress cypress/included:<< parameters.cypressVersion >> info

      - run:
          name: 'Check Node version'
          command: |
            export NODE_VERSION=$(docker run --entrypoint node cypress/included:<< parameters.cypressVersion >> --version)
            export CYPRESS_NODE_VERSION=$(docker run --entrypoint cypress cypress/included:<< parameters.cypressVersion >> version --component node)
            echo "Included Node $NODE_VERSION"
            echo "Cypress includes Node $CYPRESS_NODE_VERSION"
            # "node --version" returns something like "v12.1.2"
            # and "cypres version ..." returns just "12.1.2"
            if [ "$NODE_VERSION" = "v$CYPRESS_NODE_VERSION" ]; then
              echo "Node versions match"
            else
              echo "Node version mismatch 🔥"
              # TODO make sure there are no extra characters in the versions
              # https://github.com/cypress-io/cypress-docker-images/issues/411
              # exit 1
            fi

  test-included-image:
    description: Testing Docker image with Cypress pre-installed
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: New test project and testing
          no_output_timeout: '3m'
          command: |
            node --version
            mkdir test
            cd test
            echo "Initializing test project"
            npx @bahmutov/cly init --cypress-version << parameters.cypressVersion >>

            echo "Testing using Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >>

            echo "Testing using Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e cypress/included:<< parameters.cypressVersion >> --browser chrome
          working_directory: /tmp

  test-included-image-using-kitchensink:
    description: Testing Cypress pre-installed using Kitchensink
    parameters:
      cypressVersion:
        type: string
        description: Cypress version to test, like "4.0.0"
      imageName:
        type: string
        description: Cypress included docker image to test
    steps:
      - run:
          name: Testing Kitchensink
          no_output_timeout: '3m'
          command: |
            node --version
            mkdir test-kitchensink
            cd test-kitchensink

            npm init -y
            echo '{}' > cypress.json

            echo "Testing using Electron browser"
            docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_INTERNAL_FORCE_SCAFFOLD=1 cypress/included:<< parameters.cypressVersion >>

            echo "Testing using Chrome browser"
            docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_INTERNAL_FORCE_SCAFFOLD=1 cypress/included:<< parameters.cypressVersion >> --browser chrome

          working_directory: /tmp

  docker-push:
    description: Log in and push a given image to Docker hub
    parameters:
      imageName:
        type: string
        description: Docker image name to push
    steps:
      # before pushing, let's check again that the Docker Hub does not have the image
      # accidental rebuild and overwrite of an image is bad, since it can bump every tool
      # https://github.com/cypress-io/cypress/issues/6335
      - halt-if-docker-image-exists:
          imageName: << parameters.imageName >>
      - run:
          name: Pushing image << parameters.imageName >> to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push << parameters.imageName >>

jobs:
  lint-markdown:
    executor:
      name: node/default
      tag: '12'
    steps:
      - checkout
      - node/with-cache:
          steps:
            - run: npm ci
      - run: npm run check:markdown

  build-base-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/base
      dockerTag:
        type: string
        description: Image tag to build like "12.14.0"
      checkNodeVersion:
        type: boolean
        description: Check if the FROM image name is strict Node version
        default: true
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: base/<< parameters.dockerTag >>

      - test-base-image:
          nodeVersion: v<< parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
          checkNodeVersion: << parameters.checkNodeVersion >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-browser-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/browsers
      dockerTag:
        type: string
        description: Image tag to build like "node12.4.0-chrome76"
      chromeVersion:
        type: string
        default: ''
        description: Chrome version to expect in the base image, starts with "Google Chrome XX"
      firefoxVersion:
        type: string
        default: ''
        description: Firefox version to expect in the base image, starts with "Mozilla Firefox XX"
      edgeVersion:
        type: string
        default: ''
        description: Edge version to expect in the base image, starts with "Microsoft Edge XX"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: browsers/<< parameters.dockerTag >>
      - test-browser-image:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
          chromeVersion: << parameters.chromeVersion >>
          firefoxVersion: << parameters.firefoxVersion >>
          edgeVersion: << parameters.edgeVersion >>
      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

  build-included-image:
    machine: true
    parameters:
      dockerName:
        type: string
        description: Image name to build
        default: cypress/included
      dockerTag:
        type: string
        description: Image tag to build, should match Cypress version, like "3.8.1"
    steps:
      - checkout
      - halt-if-docker-image-exists:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>
      - run:
          name: building Docker image << parameters.dockerName >>:<< parameters.dockerTag >>
          command: |
            docker build -t << parameters.dockerName >>:<< parameters.dockerTag >> .
          working_directory: included/<< parameters.dockerTag >>

      - test-included-image-versions:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - test-included-image:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - test-included-image-using-kitchensink:
          cypressVersion: << parameters.dockerTag >>
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

      - halt-on-branch
      - docker-push:
          imageName: << parameters.dockerName >>:<< parameters.dockerTag >>

workflows:
  version: 2
  lint:
    jobs:
      - lint-markdown
`

const splitImageFolderName = (folderName) => {
  const [name, tag] = folderName.split('/')
  return {
    name,
    tag,
  }
}

const formBaseWorkflow = (base) => {
  const yml =
    '       - build-base-image:\n' + `           name: "base ${base.tag}"\n` + `           dockerTag: "${base.tag}"\n`

  // NOT SURE IF THIS IS NEEDED
  if (base.tag === '12.0.0-libgbm' || base.tag === 'manjaro-14.12.0') {
    yml += `          checkNodeVersion: false\n`
  }
  return yml
}

const formAwsCodeBuildBaseWorkflow = (base) => {
  const identifier = camelCase(`${base.name}${base.tag}`)
  const yml = `    - identifier: ${identifier}
      env:
        image: aws/codebuild/standard:5.0
        type: LINUX_CONTAINER
        privileged-mode: true
        compute-type: BUILD_GENERAL1_MEDIUM
        variables:
          IMAGE_REPO_NAME: "cypress/${base.name}"
          IMAGE_DIR: "${base.name}"
          IMAGE_TAG: "${base.tag}"\n`
  return yml
}

const writeConfigFile = (base) => {
  const baseWorkflow = formBaseWorkflow(base)
  const text = preamble.trim() + os.EOL + baseWorkflow
  fs.writeFileSync('circle.yml', text, 'utf8')
  console.log('generated circle.yml')
}

const writeBuildSpecConfigFile = (base) => {
  const baseWorkflow = formAwsCodeBuildBaseWorkflow(base)
  console.log('** baseWorkflow **', baseWorkflow)
  const text = awsCodeBuildPreamble.trim() + os.EOL + baseWorkflow + os.EOL + awsCodeBuildPostamble.trim()
  console.log('** text **', text)
  fs.writeFileSync('buildspec.yml', text, 'utf8')
  console.log('generated buildspec.yml')
}

const base = splitImageFolderName(outputFolder)
console.log('** base image **')
console.log(base)

writeConfigFile(base)
writeBuildSpecConfigFile(base)
